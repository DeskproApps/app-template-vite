name: PR Build

on:
  pull_request:
    branches:
      - master

jobs:
  deskpro_app_test_and_build:
    name: Test / Build
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --no-tags --depth=1 origin master

      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Clone repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore Yarn cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

      - name: Type check
        run: yarn tsc --noemit

      - name: Run tests
        run: yarn test:coverage

      - name: Build
        run: yarn build

      - name: Package app zip
        working-directory: dist
        run: |
          zip -rq ../app.zip *
          mv ../app.zip .

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: app-package
          path: |
            dist/app.zip
            dist/manifest.json
          retention-days: 30

  deploy:
    name: Deploy / Deskpro Demo
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    needs: [deskpro_app_test_and_build]

    steps:
      - run: |
          mkdir -p compose
          
          curl -fsSL \
            -H "Accept: application/vnd.github.VERSION.raw" \
            -H "Authorization: token ${{ secrets.DESKPRO_SERVICE_TOKEN }}" \
            -o compose/docker-compose.yml \
            https://api.github.com/repos/deskpro/deskpro-product/contents/docker/compose/demo/docker-compose.yml

      - name: Create Docker SSH context
        uses: deskpro/gh-actions/create-ssh-docker-context@master
        with:
          context-name: 'demo'
          private-key: ${{ secrets.DEMO_SERVER_SSH_KEY }}
          user: ${{ secrets.DEMO_SERVER_SSH_USER }}
          host: ${{ secrets.DEMO_SERVER_SSH_HOST }}

      - name: Switch Docker context
        run: |
          docker context use demo

      - name: Deploy demo
        id: deployment
        uses: deskpro/gh-actions/deploy-deskpro-demo@master
        with:
          compose-project-path: compose

          registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
          registry-password: ${{ secrets.DOCKERHUB_TOKEN }}

          license-key: ${{ secrets.DESKPRO_LICENSE_KEY }}
          vhost-domain: ${{ secrets.DESKPRO_DEMO_FQDN }}

          url-resource: '/horizon-ui/app'

      - name: Lookup container ID
        id: container
        run: |
          service_name="${{ steps.deployment.outputs.swarm-stack-name }}_deskpro"
          service_id="$(docker service ps -q "${service_name}" | head -1)"
          
          if [ -z "${service_id}" ]; then
            echo "::error title=Deskpro Swarm service ${service_name} not found::Deskpro Swarm service ${service_name} not found"
            exit 1
          fi
          
          container_id="$(docker inspect --format '{{.Status.ContainerStatus.ContainerID}}' "${service_id}")"
          echo "::set-output name=id::${container_id}"

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: app-package
          path: app-package

      - name: Discover app name
        id: app
        working-directory: app-package
        run: |
          app_name=$(jq -r '.name' manifest.json)
          echo "::set-output name=name::${app_name}"

      - name: Copy package to container
        working-directory: app-package
        run: |
          docker cp app.zip "${{ steps.container.outputs.id }}:/srv/deskpro/tools/fixtures/resources/custom_app_packages/app.zip"

      - name: Add package
        run: |
          docker exec "${{ steps.container.outputs.id }}" php /srv/deskpro/tools/fixtures/artisan apps:insert \
            --package=app.zip

      - name: Install package
        run: |
          docker exec "${{ steps.container.outputs.id }}" php /srv/deskpro/tools/fixtures/artisan apps:install \
            --name="${{ steps.app.outputs.name }}" \
            --settings=${{ toJSON(secrets.APP_SETTINGS) }} \
            --permission-person-ids=1 \
            --uninstall-instances-before-install
